Vue
————————————————————————————————————————————————————————————————————————————————————————————————————————————————
Vue (pronounced /vjuː/, like view) is a progressive framework for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable.
————————————————————————————————————————————————————————————————————————————————————————————————————————————————


Include Vue (CDN)
————————————————————————————————————————————————————————————————————————————————————————————————————————————————
<script src="https://cdn.jsdelivr.net/npm/vue"></script>
————————————————————————————————————————————————————————————————————————————————————————————————————————————————


Creating a Vue Instance
————————————————————————————————————————————————————————————————————————————————————————————————————————————————
Every Vue application starts by creating a new Vue instance with the Vue function:

var vm = new Vue({
  // options
})
————————————————————————————————————————————————————————————————————————————————————————————————————————————————


Data and Methods
————————————————————————————————————————————————————————————————————————————————————————————————————————————————
When a Vue instance is created, it adds all the properties found in its data object to Vue’s reactivity system. 
When the values of those properties change, the view will “react”, updating to match the new values.


// Our data object
var data = { a: 1 }

// The object is added to a Vue instance
var vm = new Vue({
  data: data
})

// These reference the same object!
vm.a === data.a // => true

// Setting the property on the instance
// also affects the original data
vm.a = 2
data.a // => 2

// ... and vice-versa
data.a = 3
vm.a // => 3


It should be noted that properties in data are only reactive if they existed when the instance was created. 
That means if you add a new property, like:

vm.b = 'hi'


If you know you’ll need a property later, but it starts out empty or non-existent, 
you’ll need to set some initial value. For example:

data: {
  newTodoText: '',
  visitCount: 0,
  hideCompletedTodos: false,
  todos: [],
  error: null
}


Object.freeze() - prevents existing properties from being changed, which also means the reactivity 
system can’t track changes.

var obj = {
  foo: 'bar'
}

Object.freeze(obj)

new Vue({
  el: '#app',
  data () {
    return {
      obj
    }
  }
})


<div id="app">
  <p>{{ obj.foo }}</p>
  <!-- this will no longer update obj.foo! -->
  <button @click="obj.foo = 'baz'">Change it</button>
</div>

————————————————————————————————————————————————————————————————————————————————————————————————————————————————



Vue instance properties and methods
————————————————————————————————————————————————————————————————————————————————————————————————————————————————
In addition to data properties, Vue instances expose a number of useful instance properties and methods. 
These are prefixed with $ to differentiate them from user-defined properties. 
For example:

var data = { a: 1 }
var vm = new Vue({
  el: '#example',
  data: data
})

vm.$data === data // => true
vm.$el === document.getElementById('example') // => true

// $watch is an instance method
vm.$watch('a', function (newValue, oldValue) {
  // This callback will be called when `vm.a` changes
})

————————————————————————————————————————————————————————————————————————————————————————————————————————————————




Instance Lifecycle Hooks
————————————————————————————————————————————————————————————————————————————————————————————————————————————————
Each Vue instance goes through a series of initialization steps when it’s created - for example, 
it needs to set up data observation, compile the template, mount the instance to the DOM, 
and update the DOM when data changes. Along the way, it also runs functions called lifecycle hooks, 
giving users the opportunity to add their own code at specific stages.

For example, the created hook can be used to run code after an instance is created:

new Vue({
  data: {
    a: 1
  },
  created: function () {
    // `this` points to the vm instance
    console.log('a is: ' + this.a)
  }
})
// => "a is: 1"



There are also other hooks which will be called at different stages of the instance’s lifecycle, 
such as mounted, updated, and destroyed. 
All lifecycle hooks are called with their this context pointing to the Vue instance invoking it.


!!!! Don’t use arrow functions on an options property or callback, such as 

 created: () => console.log(this.a) or 
 vm.$watch('a', newValue => this.myMethod())

Since arrow functions are bound to the parent context, this will not be the Vue instance as you’d expect, 
often resulting in errors such as 

 Uncaught TypeError: Cannot read property of undefined or
 Uncaught TypeError: this.myMethod is not a function.

————————————————————————————————————————————————————————————————————————————————————————————————————————————————


Template Syntax - Interpolations
————————————————————————————————————————————————————————————————————————————————————————————————————————————————

# Text
The most basic form of data binding is text interpolation using the “Mustache” syntax (double curly braces):

     <span>Message: {{ msg }}</span>

The mustache tag will be replaced with the value of the msg property on the corresponding data object. 
It will also be updated whenever the data object’s msg property changes.

You can also perform one-time interpolations that do not update on data change by using the v-once directive, 
but keep in mind this will also affect any binding on the same node:

     <span v-once>This will never change: {{ msg }}</span>


# Raw HTML

The double mustaches interprets the data as plain text, not HTML. In order to output real HTML, 
you will need to use the v-html directive:

     <p>Using v-html directive: <span v-html="rawHtml"></span></p>

The contents of the span will be replaced with the value of the rawHtml property, 
interpreted as plain HTML - data bindings are ignored. 
Note that you cannot use v-html to compose template partials, because Vue is not a string-based templating engine. 
Instead, components are preferred as the fundamental unit for UI reuse and composition.


!!! Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. 
!!! Only use HTML interpolation on trusted content and never on user-provided content.


# Attributes

Mustaches cannot be used inside HTML attributes. Instead, use a v-bind directive:

     <div v-bind:id="dynamicId"></div>

In the case of boolean attributes, where their mere existence implies true, v-bind works a little differently. 
In this example:

     <button v-bind:disabled="isButtonDisabled">Button</button>


If isButtonDisabled has the value of null, undefined, or false, the disabled attribute will not even be 
included in the rendered <button> element.


# Using JavaScript Expressions

So far we’ve only been binding to simple property keys in our templates. 
But Vue.js actually supports the full power of JavaScript expressions inside all data bindings:


     {{ number + 1 }}

     {{ ok ? 'YES' : 'NO' }}

     {{ message.split('').reverse().join('') }}

     <div v-bind:id="'list-' + id"></div>


These expressions will be evaluated as JavaScript in the data scope of the owner Vue instance. 
One restriction is that each binding can only contain one single expression, so the following will NOT work:

     <!-- this is a statement, not an expression: -->
     {{ var a = 1 }}

     <!-- flow control won't work either, use ternary expressions -->
     {{ if (ok) { return message } }}

————————————————————————————————————————————————————————————————————————————————————————————————————————————————



Template Syntax - Directives
————————————————————————————————————————————————————————————————————————————————————————————————————————————————

Directives are special attributes with the v- prefix. 
Directive attribute values are expected to be a single JavaScript expression (with the exception for v-for)
A directive’s job is to reactively apply side effects to the DOM when the value of its expression changes.

     <p v-if="seen">Now you see me</p>


Here, the v-if directive would remove/insert the <p> element based on the truthiness of the value of the 
expression seen



# Arguments

Some directives can take an “argument”, denoted by a colon after the directive name. 
For example, the v-bind directive is used to reactively update an HTML attribute:

     <a v-bind:href="url"> ... </a>


Here href is the argument, which tells the v-bind directive to bind the element’s href attribute 
to the value of the expression url.


Another example is the v-on directive, which listens to DOM events:

     <a v-on:click="doSomething"> ... </a>

Here the argument is the event name to listen to


# Modifiers

Modifiers are special postfixes denoted by a dot, which indicate that a directive should be bound in 
some special way. 

For example, the .prevent modifier tells the v-on directive to call event.preventDefault() 
on the triggered event:


     <form v-on:submit.prevent="onSubmit"> ... </form>

————————————————————————————————————————————————————————————————————————————————————————————————————————————————



Template Syntax - Directives
————————————————————————————————————————————————————————————————————————————————————————————————————————————————

# v-bind Shorthand

     <!-- full syntax -->
     <a v-bind:href="url"> ... </a>

     <!-- shorthand -->
     <a :href="url"> ... </a>

# v-on Shorthand

     <!-- full syntax -->
     <a v-on:click="doSomething"> ... </a>

     <!-- shorthand -->
     <a @click="doSomething"> ... </a>

They may look a bit different from normal HTML, but : and @ are valid chars for attribute names 
and all Vue.js supported browsers can parse it correctly. In addition, they do not appear in the final rendered markup. 
The shorthand syntax is totally optional, but you will likely appreciate it when you learn more about its usage later.

————————————————————————————————————————————————————————————————————————————————————————————————————————————————































